import time
import logging
from Controladores.GerenciadorCarga import GerenciadorCarga


class MenuConsole:
    def __init__(self):
        self.gerenciador = GerenciadorCarga('ListaBanco.ini')
        self.logger = logging.getLogger('SimuladorCarga.MenuConsole')

    def exibir_menu_principal(self):
        self.logger.info("Aplica√ß√£o iniciada - Menu principal exibido")

        while True:
            print("\n" + "=" * 75)
            print("üî• SIMULADOR DE CARGA FIREBIRD - CONTROLE POR IP üî•")
            print("üìä M√ÅXIMO 8 CONSULTAS SIMULT√ÇNEAS POR IP")
            print("üîÑ SISTEMA DE FILA PARA TODAS AS LOJAS")
            print("=" * 75)
            print("1 - Iniciar simula√ß√£o (Modo Normal - 5 threads/loja)")
            print("2 - Iniciar simula√ß√£o (Modo Alta Carga - 10 threads/loja)")
            print("3 - Parar simula√ß√£o")
            print("4 - Status da simula√ß√£o")
            print("5 - Estat√≠sticas por IP")
            print("6 - Resumo de IPs e filas")
            print("7 - Monitor em tempo real")
            print("8 - Sair")
            print("=" * 75)
            print("CONSULTAS: SP_GERENCIAL ‚Ä¢ SP_DRE ‚Ä¢ EMPRESA ‚Ä¢ PRODUTOS ‚Ä¢ CLIENTES")
            print("GARANTIA: Todas as lojas ser√£o processadas (sistema de fila)")
            print("=" * 75)

            opcao = input("Escolha uma op√ß√£o: ")
            self.logger.info(f"Op√ß√£o selecionada: {opcao}")

            if opcao == '1':
                self._iniciar_simulacao(False)
            elif opcao == '2':
                self._iniciar_simulacao(True)
            elif opcao == '3':
                self._parar_simulacao()
            elif opcao == '4':
                self._exibir_status()
            elif opcao == '5':
                self._exibir_estatisticas()
            elif opcao == '6':
                self._exibir_resumo_ips()
            elif opcao == '7':
                self._monitor_tempo_real()
            elif opcao == '8':
                self._sair_aplicacao()
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
                self.logger.warning(f"Op√ß√£o inv√°lida selecionada: {opcao}")

    def _iniciar_simulacao(self, modo_alta_carga):
        threads_por_loja = 10 if modo_alta_carga else 5
        modo_texto = f"Alta Carga ({threads_por_loja} threads/loja)" if modo_alta_carga else f"Normal ({threads_por_loja} threads/loja)"

        print(f"\nüöÄ Iniciando simula√ß√£o - Modo: {modo_texto}")
        print("üìä M√°ximo de 8 consultas simult√¢neas por IP")
        print("üîÑ Sistema de fila ativo para processar todas as lojas")
        print("‚è≥ Aguarde enquanto o sistema organiza as filas...")

        self.gerenciador.iniciar_simulacao_carga(modo_alta_carga)
        print("\n‚úÖ Simula√ß√£o iniciada com sucesso!")
        print("üéØ TODAS AS LOJAS SER√ÉO PROCESSADAS RESPEITANDO O LIMITE POR IP!")

    def _parar_simulacao(self):
        print("üõë Parando simula√ß√£o de carga...")
        self.gerenciador.parar_simulacao_carga()
        print("‚úÖ Simula√ß√£o parada com sucesso!")

    def _exibir_status(self):
        status = "üü¢ EXECUTANDO" if self.gerenciador.obter_status_execucao() else "üî¥ PARADO"
        print(f"Status da simula√ß√£o: {status}")
        self.logger.info(f"Status consultado: {status}")

    def _exibir_estatisticas(self):
        estatisticas = self.gerenciador.obter_estatisticas_completas()
        if estatisticas:
            print("\n" + "=" * 90)
            print("üìä ESTAT√çSTICAS DETALHADAS POR IP")
            print("=" * 90)

            totais = estatisticas.get('TOTAIS_GERAIS', {})
            if totais:
                modo = "ALTA CARGA" if totais.get('modo_alta_carga') else "NORMAL"
                print(f"üî• MODO: {modo}")
                print(f"üñ•Ô∏è  IPs √öNICOS: {totais.get('ips_√∫nicos', 0)}")
                print(f"‚úÖ IPs ATIVOS: {totais.get('ips_ativos', 0)}")
                print(f"üè™ LOJAS ATIVAS: {totais.get('lojas_ativas_total', 0)}")
                print(f"‚è≥ LOJAS NA FILA: {totais.get('lojas_na_fila', 0)}")
                print(f"üîó THREADS: {totais.get('threads_ativas', 0)}/{totais.get('threads_total', 0)}")
                print(f"üìà CONSULTAS: {totais.get('total_consultas', 0):,}")
                print(f"‚ùå ERROS: {totais.get('total_erros', 0)}")
                print(f"üéØ LIMITE POR IP: {totais.get('limite_por_ip', 0)}")
                print("=" * 90)

            for ip_porta, stats in estatisticas.items():
                if ip_porta != 'TOTAIS_GERAIS':
                    print(f"\nüñ•Ô∏è  IP: {ip_porta}")
                    print(f"   üè™ Lojas Ativas: {stats.get('total_lojas_ativas', 0)}/{stats.get('limite_maximo', 8)}")
                    print(f"   ‚è≥ Fila de Espera: {stats.get('fila_aguardando', 0)} lojas")
                    print(f"   üîó Threads: {stats.get('threads_ativas', 0)}/{stats.get('threads_total', 0)}")
                    print(f"   üìà Consultas: {stats.get('total_consultas', 0):,}")
                    print(f"   ‚ùå Erros: {stats.get('total_erros', 0)}")

                    lojas_ativas = stats.get('lojas_ativas', {})
                    if lojas_ativas:
                        print(f"   üìã Lojas em execu√ß√£o:")
                        for nome_loja, dados_loja in list(lojas_ativas.items())[:3]:
                            print(f"      ‚Ä¢ {nome_loja}: {dados_loja.get('total_consultas', 0)} consultas")
                        if len(lojas_ativas) > 3:
                            print(f"      ... e mais {len(lojas_ativas) - 3} lojas")

                    print("   " + "-" * 60)
        else:
            print("‚ùå Simula√ß√£o n√£o est√° em execu√ß√£o")

    def _exibir_resumo_ips(self):
        resumo = self.gerenciador.obter_resumo_ips()
        if resumo:
            print("\n" + "=" * 85)
            print("üñ•Ô∏è  RESUMO DE CONTROLE POR IP")
            print("=" * 85)
            print(f"{'IP:PORTA':<20} {'ATIVAS':<8} {'FILA':<8} {'CONSULTAS':<12} {'THREADS':<10} {'USO%':<8}")
            print("-" * 85)

            for ip_info in resumo:
                ip_porta = ip_info['ip_porta']
                ativas = f"{ip_info['lojas_ativas']}/8"
                fila = ip_info['lojas_fila']
                consultas = ip_info['consultas']
                threads = ip_info['threads_ativas']
                uso = f"{ip_info['percentual_uso']:.1f}%"

                print(f"{ip_porta:<20} {ativas:<8} {fila:<8} {consultas:<12,} {threads:<10} {uso:<8}")

            print("=" * 85)
            print(f"‚úÖ TOTAL DE IPs √öNICOS: {len(resumo)}")
            print("üéØ CADA IP LIMITADO A M√ÅXIMO 8 CONSULTAS SIMULT√ÇNEAS")
            print("üîÑ SISTEMA DE FILA GARANTE QUE TODAS AS LOJAS SEJAM PROCESSADAS")
        else:
            print("‚ùå Simula√ß√£o n√£o est√° em execu√ß√£o")

    def _monitor_tempo_real(self):
        if not self.gerenciador.obter_status_execucao():
            print("‚ùå Simula√ß√£o n√£o est√° em execu√ß√£o")
            return

        print("\n" + "=" * 70)
        print("üì° MONITOR EM TEMPO REAL - CONTROLE POR IP")
        print("=" * 70)
        print("Pressione Ctrl+C para voltar ao menu")
        print("-" * 70)

        try:
            contador = 0
            while self.gerenciador.obter_status_execucao():
                estatisticas = self.gerenciador.obter_estatisticas_completas()
                if estatisticas and 'TOTAIS_GERAIS' in estatisticas:
                    totais = estatisticas['TOTAIS_GERAIS']
                    consultas = totais.get('total_consultas', 0)
                    erros = totais.get('total_erros', 0)
                    threads = totais.get('threads_ativas', 0)
                    lojas_ativas = totais.get('lojas_ativas_total', 0)
                    lojas_fila = totais.get('lojas_na_fila', 0)
                    ips_ativos = totais.get('ips_ativos', 0)
                    ips_total = totais.get('ips_√∫nicos', 0)

                    print(
                        f"\rüî• {consultas:,} consultas | ‚ùå {erros} erros | üîó {threads} threads | üè™ {lojas_ativas} ativas | ‚è≥ {lojas_fila} fila | üñ•Ô∏è  {ips_ativos}/{ips_total} IPs",
                        end='', flush=True)

                    contador += 1
                    if contador % 30 == 0:
                        print()
                        print("üìä Top 5 IPs por consultas:")
                        resumo = self.gerenciador.obter_resumo_ips()
                        if resumo:
                            for i, ip_info in enumerate(resumo[:5], 1):
                                print(
                                    f"   {i}. {ip_info['ip_porta']}: {ip_info['consultas']:,} consultas, {ip_info['lojas_ativas']}/8 ativas")
                        print("-" * 70)

                time.sleep(1)
        except KeyboardInterrupt:
            print("\n\nüîô Voltando ao menu...")

    def _sair_aplicacao(self):
        self.logger.info("Encerrando aplica√ß√£o")
        if self.gerenciador.obter_status_execucao():
            print("üõë Parando simula√ß√£o antes de sair...")
            self.gerenciador.parar_simulacao_carga()
        print("üëã Encerrando aplica√ß√£o...")